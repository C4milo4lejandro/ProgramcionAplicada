# -*- coding: utf-8 -*-
"""Arreglos_y_métodos.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VJ22EpZrqAF0Ias6lDIwtyvQA4AvopNO
"""

import numpy as np

sample_list = [1, 2, 3]

np.array(sample_list)
#Convierte la lista sample_past en un array numpy

my_vector = np.array(['this', 'is', 'a', 'vector'])
#Asigna en array numpy a la variable "my_vector"

my_matrix = [[1, 2, 3],[4, 5, 6],[7, 8, 9]]
#Crea una matriz compuesta por 3 listas de 3 elementos

np.array(my_matrix)
#Convierte la matriz en array

#Método arange

np.arange(0,5)
#Devuelve un arreglo con elementos ordenados del 0 al 4

np.arange(1,11,2)
#Devuelve un arreglo con elementos del 1 al 10 con pasos de a 2

np.zeros(4)

#Devuelve un arreglo de 4 0s

np.ones(5)

#Devuelve un arreglo de 5 1s

np.linspace(0, 1, 4)

#Devuelve un arreglo con 4 elementos del 0 al 1

#np.eye(1)

#np.eye(2)

np.eye(50)

#Devuelve una matriz identidad de n filas y n columnas

low=2
high=100
sample_size=10

#np.random.rand(sample_size)
#Devuelve una muestra de 5 elementos random entre el 0 y el 1, decimales

#np.random.randn(sample_size)
#Devuelve una muestra de 3 elementos random entre -2 y 2

np.random.randint(low, high, sample_size)
#Devuelve una muestra de 10 enteros >= que "low" y menores que "high"

arr = np.array([0,1,2,3,4,5])

arr.reshape(2,3)
#Redimensiona el array a una matriz de 2 filas x 3 columnas

#arr = np.array([0,1,2,3,4,5])

#arr.shape
#Devuelve la forma o dimensión del arreglo

arr = arr.reshape(2,3)

arr.shape
#Devuelve la forma o dimensión después de modificarlo

arr.reshape(2,3).shape
#Hace lo mismo que el bloque anterior pero en una sola línea con el método ".shape" después de redimensionarlo

#MÁXIMOS Y MÍNIMOS

simple_array = [1, 2, 3, 4]

max(simple_array)
#Para hallar el nmáximo

np.argmax(simple_array)
#Para hallar el índice del máximo

min(simple_array)
#Para hallar el mínimo

np.argmin(simple_array)
#Para hallar el índice del mínimo

arr = np.arange(4)
#Crea un array de 4 elementos

arr
#Lo imprime

2 + arr
#Devuele el array con cada elemento +2

arr + arr
#Devuelve el array con cada elemento sumado entre sí por posición

arr - 10
#Devuelve el array con cada elemento -10

arr - arr
#Devuelve el array con cada elemento restado entre sí por posición

6 * arr
#Devuelve el array con cada elemento *6

arr * arr
#Devuelve el array con cada elemento multiplicado entre sí por posición

arr / 2
#Devuelve el array con cada elemento dividido entre 2

arr / arr
#Devuelve el array con cada elemento dividido entre sí por posición
#Si la división es no definidia, devuelve un "nan"

np.sqrt(arr)
#Devuelve el array con la raíz cuadrada de cada elemento

np.exp(arr)
#Devuelve e ^ cada elemento del array

np.sin(arr)
#Devuelve el seno de cada elemento del array

np.cos(arr)
#Devuelve el coseno de cada elemento del array

np.log(arr)
#Devuelve el logaritmo natural de cada elemento del array

arr = np.random.rand(5)
arr

#Devuelve un arreglo con 5 elementos aleatorios entre 0 y 1

arr = np.round(arr, 5)
arr

#Redondea cada elemento del array a n decimales

arr[0]
#Devuelve el elemento en la posición n del array

arr[:]
#Devuele el recorrido de todos los elementos del array

arr[1:]
#Devuelve el recorrido de todos los elementos del array a partir del elemento en posición 1

arr[1:4]
#Devuelve el recorrido de todos los elementos del array a partir del elemento en posición 1 hasta el 4-1

arr[:] = 0
arr

#Devuelve el array de 5 elementos con cada elemento con su valor modificado a 0

arr[2:5] = 0.5
arr

#Devuelve el array de 5 elementos con los elementos del 2 al 5 con sus valores modificados a 0.5
#Ojo con el valor "0.5", debe llevar "." y no ","

new_array = np.array([6, 7, 8, 9])
new_array

second_new_array = new_array[0:2]
second_new_array
#Asigna el valor de los primeros 2 valores del array a "second_new_array"

second_new_array[1] = 4
second_new_array
#Reasigna el valor del elemento en la posición 1 por 4

array_to_copy = np.array([1, 2, 3])
array_to_copy

copied_array = array_to_copy.copy()
copied_array
#Devuelve el array original copiado en "copied_array"

copied_array[0] = 9
#Reasigna a 9 el valor del elemento 0 en el array

copied_array
#Lo imprime

array_to_copy
#Devuelve el array antes de modificarlo

mat = np.array([[5, 10, 15],[20, 25, 30],[35, 40, 45]])
#Crea un arreglo de 3 elementos, cada elemento cuenta con 3 elementos más, por lo que es un arreglo 3x3

mat.shape

mat[0]
#Devuelve la posición 0 del array, esta corresponde a la fila 1

mat[0][-1]
#Devuelve el último elemento de la primera fila del array

mat[1:][:2]
#Devuelve el elemento 1 y 2 del array completos

arr = np.array([0.69, 0.94, 0.66, 0.73, 0.83])
#Crea un array con los elementos declarados

arr > 0.7
#Devuelve booleanos de la evaluación de la condición

arr[arr > 0.7]
#Devuelve solo los elementos que cumplen la condición
